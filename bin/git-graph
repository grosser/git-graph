#!/usr/bin/env ruby
require 'optparse'
$LOAD_PATH << File.join(File.dirname(__FILE__), '..', 'lib')
require 'git/graph'
require 'time'

options = {
  :chart_dimensions => '600x500',
  :value_name => "value",
  :chart_title => "git-chart"
}
OptionParser.new do |opts|
  opts.banner = <<BANNER
Make graphs from your git history.

Usage:
    git-graph --interval day --output csv "cat Readme.md | wc -l"

Options:
BANNER
  opts.on("-s", "--start DATA", "Start date (default: today)") { |date| options[:start] = Time.parse(date) }
  opts.on("-e", "--end DATA", "End date (default: time of first commit)") { |date| options[:end] = Time.parse(date) }
  opts.on("-o", "--output FORMAT", "Output format - csv|chart") { |format| options[:format] = format }
  opts.on("-i", "--interval INTERVAL", "Interval of git history - year|week|day)") { |interval| options[:interval] = interval }
  opts.on("-b", "--bundle", "Bundle before running command") { options[:bundle] = true }
  opts.on("--chart-dimensions DIMENSIONS", "Dimensions of the chart (default: #{options[:chart_dimensions]})") { |v| options[:chart_dimensions] = v }
  opts.on("--value-name NAME", "Name of the value (default: #{options[:value_name]})") { |v| options[:value_name] = v }
  opts.on("--chart-title TITLE", "Chart title (default: #{options[:chart_title]})") { |v| options[:chart_title] = v }
  opts.on("-h", "--help","Show this.") { puts opts; exit }
  opts.on('-v', '--version','Show Version'){ puts Git::Graph::VERSION; exit}
end.parse!

raise "Give me 1 command" if ARGV.size != 1

def run(cmd)
  all = ""
  $stderr.puts cmd
  IO.popen(cmd) do |pipe|
    while str = pipe.gets
      all << str
      $stderr.puts str
    end
  end
  [$?.success?, all]
end

def run!(command)
  result = run(command)
  raise "Command failed #{command}" unless result.first
  result
end

def without_bundler(&block)
  if defined?(Bundler)
    Bundler.with_clean_env(&block)
  else
    yield
  end
end

start = (options[:start] || Time.now)
finish = (options[:end] || Time.at(run!("git log --reverse --format='%at' | head -1").last.to_i))
current = start
raise "Backwards" if start < finish

DAY = 24*60*60
INTERVALS = {
  "day" => DAY,
  "week" => 7 * DAY,
  "year" => 365 * DAY
}

data = {}
interval = (INTERVALS[options[:interval] || "year"] || raise("unsupported interval"))

begin
  while current > finish
    date = current.strftime("%Y-%m-%d")
    command = [
      "git checkout -f `git rev-list -n 1 --before='#{date}' master`",
      ("bundle check || bundle" if options[:bundle]),
      ARGV.first
    ].compact
    success, output = without_bundler { run(command.map { |c| "(#{c})" }.join(" && ")) }
    value = output.split("\n").last.to_s.strip
    data[date] = if success && value =~ /^\d/
      value =~ /^\d+\.\d+$/ ? value.to_f : value.to_i
    else
      data.values.last || 0
    end
    current -= interval
  end
rescue SystemExit, Interrupt
  $stderr.puts "Data collection interrupted by user"
end

# print output even if user stops execution
case options[:format]
when nil, "csv"
  puts "Date,#{options[:value_name]}"
  data.map do |date, value|
    puts "#{date},#{value}"
  end
when "chart"
  require "google_chart"
  dates = data.keys.reverse
  values = data.values.reverse
  url = GoogleChart::LineChart.new(options[:chart_dimensions], options[:chart_title], false) do |line|
    line.data(options[:value_name], values)
    line.axis :x, :labels => [dates.first, dates.last]
    line.axis :y, :labels => ['0', values.max]
  end.to_url
  puts url
else
  raise "Format #{options[:format]} unknown"
end

run("git checkout master")
